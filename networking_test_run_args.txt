server 0 1500 1000000 10 1000000 1000000 127.0.0.1:6900 127.0.0.1:7000 127.0.0.1:6900

server 0 1500 1000000 10 1000000 1000000 127.0.0.1:6900 127.0.0.1:7000 127.0.0.1:6900,127.0.0.1:6901,127.0.0.1:6902
server 1 1500 1000000 10 1000000 1000000 127.0.0.1:6901 127.0.0.1:7001 127.0.0.1:6900,127.0.0.1:6901,127.0.0.1:6902
server 2 1500 1000000 10 1000000 1000000 127.0.0.1:6902 127.0.0.1:7002 127.0.0.1:6900,127.0.0.1:6901,127.0.0.1:6902
client 127.0.0.1:7000 1 1000000 10

./networking_benchmark server 0 1500 1000000 10 1000000 1000000 10.10.1.1:6900 10.10.1.1:7000 10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900
./networking_benchmark server 1 1500 1000000 10 1000000 1000000 10.10.1.2:6900 10.10.1.2:7000 10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900
./networking_benchmark server 2 1500 1000000 10 1000000 1000000 10.10.1.3:6900 10.10.1.3:7000 10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900
./networking_benchmark client 10.10.1.4:7000 1 5000000 100

./networking_benchmark server -memory=false -node=0 -pool-data-size=5000000 -pool-warmup-size=750 -peer-connections=1 -peer-listen="10.10.1.1:6900" -client-listen="10.10.1.1:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900"
./networking_benchmark server -memory=false -node=1 -pool-data-size=5000000 -pool-warmup-size=750 -peer-connections=1 -peer-listen="10.10.1.2:6900" -client-listen="10.10.1.2:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900"
./networking_benchmark server -memory=false -node=2 -pool-data-size=5000000 -pool-warmup-size=750 -peer-connections=1 -peer-listen="10.10.1.3:6900" -client-listen="10.10.1.3:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900"

-node=0 -pool-data-size=2000 -pool-warmup-size=1000000 -peer-connections=1 -peer-listen="127.0.0.1:6900" -client-listen="127.0.0.1:7000" -peer-addresses="127.0.0.1:6900,127.0.0.1:6901,127.0.0.1:6902"
 -node=1 -pool-data-size=2000 -pool-warmup-size=1000000 -peer-connections=1 -peer-listen="127.0.0.1:6901" -client-listen="127.0.0.1:7001" -peer-addresses="127.0.0.1:6900,127.0.0.1:6901,127.0.0.1:6902"
 -node=2 -pool-data-size=2000 -pool-warmup-size=1000000 -peer-connections=1 -peer-listen="127.0.0.1:6902" -client-listen="127.0.0.1:7002" -peer-addresses="127.0.0.1:6900,127.0.0.1:6901,127.0.0.1:6902"

./networking_benchmark -walFileCount=100 -node=0 -pool-data-size=2000 -pool-warmup-size=1000000 -peer-connections=1 -peer-listen="10.10.1.1:6900" -client-listen="10.10.1.1:7000" -peer-addresses="10.10.1.1:6900"
./networking_benchmark client 10.10.1.1:7000 1 1000000 100

-node=0
-memory=true
-wal-file-count=50
-manual=fsync
-flags=none
-pool-data-size=2000
-pool-warmup-size=1000000
-peer-connections=1
-peer-listen="127.0.0.1:6900"
-client-listen="127.0.0.1:7000"
-peer-addresses="127.0.0.1:6900,127.0.0.1:6901"

./networking_benchmark server -node=0 -memory=false -wal-file-count=1 -manual=fsync -flags=none -pool-data-size=5000000 -pool-warmup-size=750 -peer-connections=1 -peer-listen="10.10.1.1:6900" -client-listen="10.10.1.1:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900" -fast-path-writes=false
./networking_benchmark server -node=1 -memory=false -wal-file-count=1 -manual=fsync -flags=none -pool-data-size=5000000 -pool-warmup-size=750 -peer-connections=1 -peer-listen="10.10.1.2:6900" -client-listen="10.10.1.2:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900" -fast-path-writes=false
./networking_benchmark server -node=2 -memory=false -wal-file-count=1 -manual=fsync -flags=none -pool-data-size=5000000 -pool-warmup-size=750 -peer-connections=1 -peer-listen="10.10.1.3:6900" -client-listen="10.10.1.3:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900" -fast-path-writes=false
client -addresses=10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900 -data-size=100000 -ops=10000 -read-ratio=0.5 -clients=33 -read-mem=true -write-mem=false -find-leader=false




start by running these commands on 4 machines.
1: sudo su
2: go version
notes: if there is no go version, it is likely a bad node. restart all the nodes every benchmark. large data such as 100k for read/write workloads error is known on etcd-light.

etcd-light server
cd /local/go_networking_benchmark/run && cd .. && git pull && go build && mv networking_benchmark run/ && cd /local/go_networking_benchmark/run && ./networking_benchmark server -num-dbs=3 -max-db-index=101000 -node=0 -memory=false -wal-file-count=1 -manual=fsync -flags=none -peer-connections=1 -peer-listen="10.10.1.1:6900" -client-listen="10.10.1.1:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900" -fast-path-writes=false
cd /local/go_networking_benchmark/run && cd .. && git pull && go build && mv networking_benchmark run/ && cd /local/go_networking_benchmark/run && ./networking_benchmark server -num-dbs=3 -max-db-index=101000 -node=1 -memory=false -wal-file-count=1 -manual=fsync -flags=none -peer-connections=1 -peer-listen="10.10.1.2:6900" -client-listen="10.10.1.2:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900" -fast-path-writes=false
cd /local/go_networking_benchmark/run && cd .. && git pull && go build && mv networking_benchmark run/ && cd /local/go_networking_benchmark/run && ./networking_benchmark server -num-dbs=3 -max-db-index=101000 -node=2 -memory=false -wal-file-count=1 -manual=fsync -flags=none -peer-connections=1 -peer-listen="10.10.1.3:6900" -client-listen="10.10.1.3:7000" -peer-addresses="10.10.1.1:6900,10.10.1.2:6900,10.10.1.3:6900" -fast-path-writes=false

etcd-light client on node4
notes: num-clients flag will do that many clients per address. example: 3 addresses and 10 numclients will = 30 clients
notes: find-leader set to true will do leader only instead of all connections. still pass in all addresses so it can find the leader.
cd /local/go_networking_benchmark && git pull && go build && ./networking_benchmark client -addresses=10.10.1.1:7000,10.10.1.2:7000,10.10.1.3:7000 -data-size=1000 -ops=100000 -read-ratio=0.0 -clients=33 -read-mem=true -write-mem=false -find-leader=false

etcd client
notes: num-clients flag will do that many clients per address. example: 3 addresses and 10 numclients will = 30 clients
notes: you must manually find leader only and set the addresses to just that address if testing leader only.
cd /local/etcd-client && git pull && go build && ./etcd-client -addresses=10.10.1.1:2379,10.10.1.2:2379,10.10.1.3:2379 -data-size=1 -num-ops=10000 -read-ratio=1.0 -num-clients=5

etcd server
notes: if testing in_memory instead of on disk, you must edit the boolean in run_etcd scripts towards the bottom.
node1: cd /local && sh run_etcd0.sh
node2: cd /local && sh run_etcd1.sh
node3: cd /local && sh run_etcd2.sh